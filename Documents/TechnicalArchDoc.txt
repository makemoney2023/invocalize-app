Technical Architecture Document
Overview
This document outlines the technical architecture of the Voice AI Call Data Management System. The application processes and analyzes call transcripts using AI, manages leads, and automates follow-up communications. It leverages modern web technologies to ensure scalability, performance, and type safety.
---
System Architecture
High-Level Diagram
To be added: A high-level system architecture diagram illustrating the interactions between the client, server, database, and third-party services.
Components
Client (Frontend): Built with Next.js using the App Router and TypeScript. It includes React components, hooks, and utilities.
Server (Backend): Handles API routes, data processing, and integrates with third-party services like OpenAI and email providers.
Database: Supabase provides both authentication and database services.
Third-Party Services:
OpenAI API: For analyzing call transcripts.
Email Services: Resend and MailerSend for sending email notifications.
---
Technology Stack
Framework: Next.js (App Router)
Language: TypeScript
Database: Supabase
ORM: Drizzle ORM
API Client: tRPC
Validation: Zod
HTTP Client: Axios
Styling: Tailwind CSS, Radix UI, shadcn/ui
Deployment: Vercel
---
Data Flow
Lead Generation: Leads are captured and stored in the Supabase database.
Real-Time Updates: The useLeadsData hook subscribes to changes in the leads table.
Transcript Analysis:
Triggered when a new lead with a concatenated_transcript is detected.
The transcript is sent to the OpenAI API via the analyzeTranscript function.
Analysis results are validated using Zod schemas and stored in the call_analyses table.
Email Notification: After successful analysis, an email summary is sent using the sendCallSummaryEmail function.
User Interface: The frontend updates to display the latest lead information and AI analysis.
---
Key Modules and Components
Frontend Components
src/components/voice-ai-call-data.tsx
Purpose: Main component rendering the application's interface.
Features:
Renders different views: Dashboard, Recent Calls, Settings, Calendar.
Utilizes state management to handle active views.
Contains sub-components like CallDataCard, CallSummary, TranscriptModal.
UI Components
Location: src/components/ui/
Components: Button, Card, Dialog, Sheet, Select, etc.
Description: Reusable UI components built with Radix UI and styled with Tailwind CSS.
Hooks
src/hooks/useLeadsData.ts
Purpose: Custom React hook to manage leads data.
Functionality:
Fetches leads data from Supabase.
Subscribes to real-time updates on the leads table.
Handles new leads by triggering transcript analysis and sending emails.
Updates local state with the latest data.
Utilities
src/utils/analysisUtils.ts
Purpose: Contains functions for AI analysis.
Functions:
analyzeTranscript:
Sends the transcript to OpenAI's GPT-3.5-turbo model.
Parses and validates the AI response using Zod schemas.
AnalysisSchema: Zod schema for validating the analysis result.
API Routes
src/app/api/analyze-transcript/route.ts
Purpose: API endpoint to handle transcript analysis requests.
Functionality:
Accepts POST requests with leadId and transcript.
Calls analyzeTranscript to get AI analysis.
Validates and saves the analysis result to Supabase.
Data Models
src/types/lead.ts
Lead Type: Represents lead information.
CallAnalysis Type: Represents AI analysis results associated with a lead.
---
Database Schema
Tables
leads
Columns:
id: string (UUID)
name: string
email: string
phone_number: string
concatenated_transcript: string
Other lead-specific fields.
call_analyses
Columns:
id: string (UUID)
lead_id: string (Foreign key to leads.id)
sentiment_score: number
key_points: string[]
customer_satisfaction: string
appointment_details: string
Relationships
One-to-Many: A lead can have multiple call analyses.
Foreign Keys: call_analyses.lead_id references leads.id.
---
Third-Party Integrations
OpenAI API
Usage: Analyzes call transcripts to extract sentiment scores, key points, and other insights.
Implementation:
Server-side only to protect API keys.
Uses the openai package.
API keys are stored securely in environment variables.
Email Services
Resend and MailerSend:
Purpose: Send email summaries to relevant parties after analysis.
Implementation:
Email templates are generated using React components (EmailTemplate).
Emails are sent asynchronously after analysis is stored.
---
Security Considerations
API Keys:
Stored securely in environment variables (e.g., .env.local).
Not exposed in client-side code.
Data Validation:
Inputs are validated using Zod schemas.
Ensures data integrity before database operations.
Environment Variables:
Accessed via process.env.
---
Error Handling and Logging
Logging:
Uses console.log for server-side debugging.
Consider integrating a logging service for production environments.
Error Handling:
try-catch blocks around asynchronous operations.
Errors are logged with descriptive messages.
Minimal user-facing error messages; can be enhanced.
---
Deployment
Platform: Vercel
Environment Variables:
Managed through Vercel's dashboard.
Ensure all required variables are set for production.
Scripts:
Defined in package.json:
"build": "next build"
"start": "next start"
---
Recommendations and Future Considerations
Performance Improvements:
Implement pagination for lead lists.
Optimize real-time subscriptions.
Testing:
Introduce unit and integration tests using Jest or similar frameworks.
Accessibility:
Add ARIA attributes.
Improve keyboard navigation.
User Experience:
Enhance error messages.
Provide user feedback on operations.
Security Enhancements:
Implement role-based access control with Supabase Auth.
Sanitize and validate all user inputs.
Monitoring:
Integrate monitoring tools to track performance and errors.
---
Conclusion
This technical architecture document provides an in-depth look at the Voice AI Call Data Management System's structure, components, and workflows. It serves as a guide for current development and a foundation for future enhancements, ensuring the application remains scalable, secure, and maintainable.
---
Appendices
Appendix A: Folder Structure
Appendix B: Environment Variables
OPENAI_API_KEY: API key for OpenAI services.
SUPABASE_URL: Supabase project URL.
SUPABASE_ANON_KEY: Supabase anonymous key.
RESEND_API_KEY or MAILERSEND_API_KEY: API keys for email services.
Ensure these variables are set in .env.local and are configured securely in the deployment environment.
---
Feel free to let me know if you need any specific sections expanded or additional details.

## Security Implementation

### Authentication
- Clerk integration for user management
- JWT token handling
- Role-based access control

### API Security
- Server-side API key storage
- Input validation with Zod
- Rate limiting
- CORS configuration

For complete security guidelines, reference:

## Error Handling
1. Client-side
   - Toast notifications for user feedback
   - Error boundary implementation
   - Type-safe error handling

2. Server-side
   - Structured error responses
   - Logging system
   - Error tracking integration

## Performance Optimization
1. Database
   - Indexed queries
   - Efficient joins
   - Connection pooling

2. Frontend
   - Code splitting
   - Image optimization
   - Caching strategies

3. API
   - Rate limiting
   - Response compression
   - Edge function utilization

## Deployment Architecture
1. Vercel Deployment
   - Automatic deployments
   - Environment variable management
   - Edge network distribution

2. Database Management
   - Supabase hosting
   - Backup strategies
   - Migration handling

3. Monitoring
   - Performance metrics
   - Error tracking
   - Usage analytics

## Development Guidelines
1. Code Organization
   - Feature-based structure
   - Shared components
   - Utility functions

2. Type Safety
   - Strict TypeScript configuration
   - Zod schema validation
   - Type inference

3. Testing Strategy
   - Unit tests
   - Integration tests
   - E2E testing

## Future Considerations
1. Scaling
   - Horizontal scaling strategies
   - Cache implementation
   - Performance monitoring

2. Feature Expansion
   - Additional integrations
   - Enhanced analytics
   - Mobile optimization

3. Security Enhancements
   - Advanced authentication
   - Encryption improvements
   - Compliance updates

## Appendices

### Appendix A: Environment Variables
Required environment variables:
- OPENAI_API_KEY
- SUPABASE_URL
- SUPABASE_ANON_KEY
- RESEND_API_KEY
- CLERK_SECRET_KEY
- CLERK_PUBLISHABLE_KEY

### Appendix B: API Documentation
For detailed API documentation, reference:

### Appendix C: Deployment Checklist
1. Environment variable configuration
2. Database migration execution
3. Build optimization
4. Security verification
5. Performance testing
6. Monitoring setup

## Conclusion
This technical architecture document serves as a comprehensive guide for the Voice AI Call Data Management System. It provides detailed information about the system's components, data flow, security measures, and development guidelines. Regular updates to this document should be made as the system evolves.
